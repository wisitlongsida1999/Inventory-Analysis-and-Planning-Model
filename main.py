import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

class InventoryOptimizer:
    def __init__(self, service_level=0.95, lead_time_months=3):
        self.inventory_df = None
        self.sales_df = None
        self.monthly_sales = None
        self.service_level = service_level
        self.lead_time_months = lead_time_months
        
    def load_data(self, inventory_df, sales_df):
        """
        ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DataFrame
        """
        self.inventory_df = inventory_df
        self.sales_df = sales_df
        self.sales_df['documentDate'] = pd.to_datetime(self.sales_df['documentDate'])
        
    def preprocess_data(self):
        """
        ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        """
        self.monthly_sales = (self.sales_df.groupby([
            pd.Grouper(key='documentDate', freq='M'),
            'product'
        ])['productQuantity']
        .sum()
        .reset_index())
        
    def calculate_metrics(self, high_stock_months=6, low_stock_months=1):
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å
        """
        # ‡πÅ‡∏õ‡∏•‡∏á service level ‡πÄ‡∏õ‡πá‡∏ô Z-score
        z_score = {
            0.90: 1.28,
            0.95: 1.96,
            0.98: 2.33,
            0.99: 2.58
        }.get(self.service_level, 1.96)
        
        results = []
        for product in self.inventory_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'].unique():
            current_stock = self.inventory_df[
                self.inventory_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'] == product
            ]['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'].values[0]
            
            product_sales = self.monthly_sales[
                self.monthly_sales['product'] == product
            ].sort_values('documentDate')
            
            if len(product_sales) > 0:
                avg_monthly_sales = product_sales['productQuantity'].mean()
                std_monthly_sales = product_sales['productQuantity'].std()
                
                stock_coverage = current_stock / avg_monthly_sales if avg_monthly_sales > 0 else float('inf')
                
                safety_stock = z_score * std_monthly_sales * np.sqrt(self.lead_time_months)
                reorder_point = (avg_monthly_sales * self.lead_time_months) + safety_stock
                
                if len(product_sales) >= 4:
                    try:
                        model = ExponentialSmoothing(
                            product_sales['productQuantity'],
                            seasonal_periods=3,
                            trend='add',
                            seasonal='add',
                            initialization_method="estimated"
                        ).fit()
                        forecast = model.forecast(3)
                        predicted_sales_3m = forecast.sum()
                    except:
                        predicted_sales_3m = avg_monthly_sales * 3
                else:
                    predicted_sales_3m = avg_monthly_sales * 3
                
                excess_stock = max(0, current_stock - (predicted_sales_3m + safety_stock))
                
                unit_value = float(self.inventory_df[
                    self.inventory_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'] == product
                ]['‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢'].values[0])
                
                results.append({
                    'product': product,
                    'current_stock': current_stock,
                    'avg_monthly_sales': round(avg_monthly_sales, 2),
                    'stock_coverage_months': round(stock_coverage, 2),
                    'safety_stock': round(safety_stock, 2),
                    'reorder_point': round(reorder_point, 2),
                    'predicted_sales_3m': round(predicted_sales_3m, 2),
                    'excess_stock': round(excess_stock, 2),
                    'excess_stock_value': round(excess_stock * unit_value, 2)
                })
        
        return pd.DataFrame(results)
    
    def get_recommendations(self, results_df, high_stock_months=6, low_stock_months=1):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å
        """
        recommendations = []
        
        for _, row in results_df.iterrows():
            if row['stock_coverage_months'] > high_stock_months:
                status = "‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
                action = "‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏™‡∏ï‡πá‡∏≠‡∏Å"
                risk_level = "‡∏™‡∏π‡∏á"
            elif row['stock_coverage_months'] < low_stock_months:
                status = "‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥"
                action = f"‡∏Ñ‡∏ß‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {int(row['reorder_point'])} ‡∏ä‡∏¥‡πâ‡∏ô"
                risk_level = "‡∏™‡∏π‡∏á"
            elif row['current_stock'] < row['reorder_point']:
                status = "‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
                action = f"‡∏Ñ‡∏ß‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö {int(row['reorder_point'] + row['safety_stock'])} ‡∏ä‡∏¥‡πâ‡∏ô"
                risk_level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            else:
                status = "‡∏õ‡∏Å‡∏ï‡∏¥"
                action = "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
                risk_level = "‡∏ï‡πà‡∏≥"
            
            recommendations.append({
                'product': row['product'],
                'status': status,
                'risk_level': risk_level,
                'action': action,
                'excess_stock_value': f"{row['excess_stock_value']:,.2f} ‡∏ö‡∏≤‡∏ó"
            })
        
        return pd.DataFrame(recommendations)

    def plot_stock_analysis(self, results_df, high_stock_months=6, low_stock_months=1):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å
        """
        fig = plt.figure(figsize=(15, 12))
        
        # Plot 1: Stock Coverage
        plt.subplot(3, 1, 1)
        colors = ['red' if x > high_stock_months else 'orange' if x < low_stock_months else 'green' 
                 for x in results_df['stock_coverage_months']]
        sns.barplot(data=results_df, x='product', y='stock_coverage_months', palette=colors)
        plt.axhline(y=high_stock_months, color='r', linestyle='--', alpha=0.5, 
                   label=f'‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({high_stock_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)')
        plt.axhline(y=low_stock_months, color='orange', linestyle='--', alpha=0.5, 
                   label=f'‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ ({low_stock_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)')
        plt.title('‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)')
        plt.xticks(rotation=45)
        plt.legend()
        
        # Plot 2: Current Stock vs Predicted Sales
        plt.subplot(3, 1, 2)
        width = 0.35
        x = np.arange(len(results_df))
        
        plt.bar(x - width/2, results_df['current_stock'], width, label='‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô')
        plt.bar(x + width/2, results_df['predicted_sales_3m'], width, label='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå (3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)')
        
        plt.xlabel('‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
        plt.ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
        plt.title('‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå')
        plt.xticks(x, results_df['product'], rotation=45)
        plt.legend()
        
        # Plot 3: Excess Stock Value
        plt.subplot(3, 1, 3)
        sns.barplot(data=results_df, x='product', y='excess_stock_value')
        plt.title('‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)')
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        return fig

def main():
    st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å", layout="wide")
    
    st.title("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å")
    
    # Sidebar
    st.sidebar.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
    
    service_level = st.sidebar.select_slider(
        "Service Level (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£)",
        options=[0.90, 0.95, 0.98, 0.99],
        value=0.95,
        help="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô = ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
    )
    
    lead_time_months = st.sidebar.slider(
        "Lead Time (‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
        min_value=1,
        max_value=6,
        value=3,
        help="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏™‡∏±‡πà‡∏á‡∏à‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
    )
    
    high_stock_months = st.sidebar.slider(
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
        min_value=3,
        max_value=12,
        value=6,
        help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
    )
    
    low_stock_months = st.sidebar.slider(
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
        min_value=0.5,
        max_value=3.0,
        value=1.0,
        step=0.5,
        help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
    )
    
    # File upload
    col1, col2 = st.columns(2)
    
    with col1:
        inventory_file = st.file_uploader("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå inventory.csv", type=['csv'])
        
    with col2:
        sales_file = st.file_uploader("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå sales.csv", type=['csv'])
    
    if inventory_file and sales_file:
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
            inventory_df = pd.read_csv(inventory_file)
            sales_df = pd.read_csv(sales_file)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á optimizer
            optimizer = InventoryOptimizer(service_level, lead_time_months)
            optimizer.load_data(inventory_df, sales_df)
            optimizer.preprocess_data()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            results = optimizer.calculate_metrics(high_stock_months, low_stock_months)
            recommendations = optimizer.get_recommendations(results, high_stock_months, low_stock_months)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            st.header("üìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            # Metrics overview
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                    f"{len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                )
            
            with col2:
                high_stock_items = len(recommendations[recommendations['status'] == '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'])
                st.metric(
                    "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
                    f"{high_stock_items} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                )
            
            with col3:
                total_excess_value = results['excess_stock_value'].sum()
                st.metric(
                    "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏£‡∏ß‡∏°",
                    f"{total_excess_value:,.2f} ‡∏ö‡∏≤‡∏ó"
                )
            
            # Detailed results
            st.subheader("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            st.dataframe(results)
            
            # Recommendations
            st.subheader("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
            st.dataframe(recommendations)
            
            # Plots
            st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            fig = optimizer.plot_stock_analysis(results, high_stock_months, low_stock_months)
            st.pyplot(fig)
            
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            
if __name__ == "__main__":
    main()